#!/usr/bin/perl
use strict;
use warnings;
use 5.10.0;

# run from gitolite-doc as "./mkdoc"

# this file is needed for my greps to work without too many errors, but should
# NOT be present when running mkdoc.  So we delete it here and put it back
# later (it's just an empty file anyway).
unlink "html/deleted.html";

# my $OUTDIR = "/tmp/doc2";
my $OUTDIR = "$ENV{HOME}/data/gits/sitaramc.github.com/gitolite";
unless (@ARGV) {
    system("rm     $OUTDIR/*.html");
    system("rm -rf $OUTDIR/images");
    system("mkdir  $OUTDIR/images");
}

# collect names of all markdown files
my @mkd = `find . -name "*.mkd" | sort`;
chomp(@mkd);

# if arguments were supplied, save them, else pretend all markdown files were supplied as arguments
my @argv = @ARGV;
@argv = @mkd unless @argv;

my %linkrefs;
my $base;
my %seen;

# first round runs through all markdown files, @mkd
@ARGV = @mkd;
while (<>) {
    unless ( $seen{$ARGV}++ ) {
        # on each change of file, compute the base name...
        $base = ( $ARGV =~ m(([^/]+)\.mkd) ? $1 : '' );
        # ...and add linkref to the file
        $linkrefs{TITLE} .= "\[$base\]: $base.html\n";
    }

    # now add linkrefs for everything else
    if ( /^#+ .* \{#(\S+)( .*?)?\}/ or /^#+ #(\S+) / ) {            # XXX last clause is transition code
        $linkrefs{$base} .= "\[$1\]: $base.html\#$1\n";
    }
}

# second round runs through markdown files supplied as arguments
while (@argv) {
    $_ = shift @argv;

    m(([^/]+)\.mkd) or die "bad mkd file: '$_'";
    $base = $1;
    next if $base eq 'gitolite';                             # single page stuff needs different treatment

    open( my $mdp, "|-", "cat $_ - > pdh.temp") or die $!;
    print $mdp "\n" . linkrefs_except($base);
    close $mdp;
    system("pdh -t html-N -i pdh.temp -o $OUTDIR/$base.html" ) and warn "WARNING: '$base.html' was not created";
    print STDERR "\r    \r" . scalar(@argv);
}
print STDERR "\r    \n";

unlink "pdh.temp";
say STDERR "----";
rename "sidebar-toc", $$;
system("touch sidebar-toc; pdh -t html-N -i gitolite.mkd -o $OUTDIR/gitolite.html");
rename $$, "sidebar-toc";

# send manually created HTML pages and images
system("cp -d html/*.html $OUTDIR");
system("cp images/* $OUTDIR/images");

# put the empty file back
_print("html/deleted.html", "");

# bloody github doesn't like symlinks...
convert_symlinks();

# ----------------------------------------------------------------------

sub linkrefs_except {
    my $base = shift;
    return join " ", map { $_ eq $base ? '' : $linkrefs{$_} } keys %linkrefs;
}

sub convert_symlinks {
    chdir $OUTDIR or die $!;
    chdir ".." or die $!;
    print STDERR "in: " . `pwd`;

    for my $l (`find . -name "*.html" -type l`) {
        chomp($l);

        # crude, but effective...
        my $t = slurp($l);
        unlink $l;
        _print($l, $t);
    }
}

# ----------------------------------------------------------------------

sub _open {
    open( my $fh, $_[0], $_[1] ) or die "open $_[1] failed: $!\n";
    return $fh;
}

sub _print {
    my ( $file, @text ) = @_;
    my $fh = _open( ">", "$file.$$" );
    print $fh @text;
    close($fh) or die "close $file failed: $! at ", (caller)[1], " line ", (caller)[2], "\n";
    my $oldmode = ( ( stat $file )[2] );
    rename "$file.$$", $file;
    chmod $oldmode, $file if $oldmode;
}

sub slurp {
    return unless defined wantarray;
    local $/ = undef unless wantarray;
    my $fh = _open( "<", $_[0] );
    return <$fh>;
}

